// miscellaneous
virtual void NOP() = 0;

/**
 * Pushes a integer value to the stack top.
 *
 * @param value is the value to be put in the stack.
 */
virtual void INT(int value) = 0;

/**
 * Adds <tt>value</tt> to the value at the position defined by the address at
 * the top of the stack, i.e. <tt>[a]</tt> becomes <tt>[a]+value</tt>.
 *
 * @param value is the value to be added.
 */
virtual void INCR(int value) = 0;

/**
 * Subtracts <tt>value</tt> from the value at the position defined by the
 * address at the top of the stack, i.e. <tt>[a]</tt> becomes <tt>[a]-value</tt>.
 *
 * @param value is the value to be subtracted.
 */
virtual void DECR(int value) = 0;

/**
 * Duplicates the value at the top of the stack.
 */
virtual void DUP() = 0;

/**
 * Duplicates the double precision value at the top of the stack.
 */
virtual void DDUP() = 0;

/**
 * Exchanges the two elements at the top of the stack.
 */
virtual void SWAP() = 0;

/**
 * Pushes to the stack the value of the stack pointer.
 */
virtual void SP() = 0;

/**
 * No action is performed.
 */
virtual void NIL() = 0;

/**
 * Declares an uninitialized vector with the length (in bytes) given as argument.
 *
 * @param value is the vector's length.
 */
virtual void BYTE(int value) = 0;

/**
 * Declares a static character.
 *
 * @param value is the character to be declared.
 */
virtual void CHAR(char value) = 0;

/**
 * Declares a static integer value.
 *
 * @param value is the number to be declared.
 */
virtual void CONST(int value) = 0;

/**
 * Declares a static simple precision floating point value.
 *
 * @param value is the number to be declared.
 */
virtual void FLOAT(float value) = 0;

/**
 * Declares a static double precision floating point value.
 *
 * @param value is the number to be declared.
 */
virtual void DOUBLE(double value) = 0;

/**
 * Declares a name for an address.
 *
 * @param label is the name to be declared.
 */
virtual void ID(std::string label) = 0;

/**
 * Declares a static character string (no special characters are allowed in <tt>value</tt>).
 *
 * @param value is the string to be declared.
 */
virtual void STR(std::string value) = 0;

public:
// arithmetic
/**
 * Arithmetic instruction: integer sum of two integer values.
 */
virtual void ADD() = 0;
/**
 * Arithmetic instruction: floating point sum of two double values.
 */
virtual void DADD() = 0;
/**
 * Arithmetic instruction: floating point division of two double values.
 */
virtual void DDIV() = 0;
/**
 * Arithmetic instruction: integer division of two integer values.
 */
virtual void DIV() = 0;
/**
 * Arithmetic instruction: floating point multiplication of two double values.
 */
virtual void DMUL() = 0;
/**
 * Arithmetic instruction: floating point negation of double value (symmetric).
 */
virtual void DNEG() = 0;
/**
 * Arithmetic instruction: floating point subtraction of two double values.
 */
virtual void DSUB() = 0;
/**
 * Arithmetic instruction: remainder of integer division of two integer values.
 */
virtual void MOD() = 0;
/**
 * Arithmetic instruction: integer multiplication of two integer values.
 */
virtual void MUL() = 0;
/**
 * Arithmetic instruction: negation (symmetric) of integer value.
 */
virtual void NEG() = 0;
/**
 * Arithmetic instruction: integer subtraction of two integer values.
 */
virtual void SUB() = 0;
/**
 * Arithmetic instruction: integer division of two natural (integer) values.
 */
virtual void UDIV() = 0;
/**
 * Arithmetic instruction: remainder of integer division of two natural (integer) values.
 */
virtual void UMOD() = 0;

public:
// shift
/**
 * Rotation and shift instructions: left rotation of stack top.
 */
virtual void ROTL() = 0;
/**
 * Rotation and shift instructions: right rotation of stack top.
 */
virtual void ROTR() = 0;
/**
 * Rotation and shift instructions: left shift of stack top.
 */
virtual void SHTL() = 0;
/**
 * Rotation and shift instructions: right shift of stack top (signed).
 */
virtual void SHTRS() = 0;
/**
 * Rotation and shift instructions: right shift of stack top (unsigned).
 */
virtual void SHTRU() = 0;

public:
// conversion
/**
 * Type conversion instructions: converts from double precision floating point to simple precision floating point.
 */
virtual void D2F() = 0;
/**
 * Type conversion instructions: converts from double precision floating point to integer.
 */
virtual void D2I() = 0;
/**
 * Type conversion instructions: converts from simple precision floating point to double precision floating point.
 */
virtual void F2D() = 0;
/**
 * Type conversion instructions: converts from integer to double precision floating point.
 */
virtual void I2D() = 0;

public:
// logical
/**
 * Logical instructions: logical (bitwise) AND operation.
 */
virtual void AND() = 0;
/**
 * Logical instructions: logical negation (bitwise), i.e., one's complement.
 */
virtual void NOT() = 0;
/**
 * Logical instructions: logical (bitwise) OR operation.
 */
virtual void OR() = 0;
/**
 * Logical instructions: logical (bitwise) XOR operation.
 */
virtual void XOR() = 0;

public:
// comparison
/**
 * Compares two double precision floating point values. The result is an
 * integer value: less than 0, if the <tt>d1</tt> is less than <tt>d2</tt>;
 * 0, if they are equal; greater than 0, otherwise.
 */
virtual void DCMP() = 0;
/**
 * Integer comparison instructions: <i>equal to</i>.
 */
virtual void EQ() = 0;
/**
 * Integer comparison instructions: <i>greater than or equal to</i>.
 */
virtual void GE() = 0;
/**
 * Integer comparison instructions: <i>greater than</i>.
 */
virtual void GT() = 0;
/**
 * Integer comparison instructions: <i>less than or equal to</i>.
 */
virtual void LE() = 0;
/**
 * Integer comparison instructions: <i>less than</i>.
 */
virtual void LT() = 0;
/**
 * Integer comparison instructions: <i>not equal to</i>.
 */
virtual void NE() = 0;
/**
 * Integer comparison instructions: <i>greater than or equal to</i> for natural numbers (unsigned integers).
 */
virtual void UGE() = 0;
/**
 * Integer comparison instructions: <i>greater than</i> for natural numbers (unsigned integers).
 */
virtual void UGT() = 0;
/**
 * Integer comparison instructions: <i>less than or equal to</i> for natural numbers (unsigned integers).
 */
virtual void ULE() = 0;
/**
 * Integer comparison instructions: <i>less than</i> for natural numbers (unsigned integers).
 */
virtual void ULT() = 0;

public:
// functions
/**
 * Function definition instructions: starts a function: push the frame pointer
 * (activation register) to the stack and allocate space for local variables,
 * according to the size given as argument (in bytes).
 *
 * @param bytes is the space to be allocated for local variables.
 */
virtual void ENTER(size_t bytes) = 0;
/**
 * Function definition instructions: equivalent to <tt>ENTER(0)</tt>.
 */
virtual void START() = 0;
/**
 * Function definition instructions: ends a function: restores the frame pointer
 * (activation register) and destroys the function-local stack data.
 */
virtual void LEAVE() = 0;
/**
 * Function definition instructions: removes a value from the stack (to the accumulator register).
 */
virtual void POP() = 0;
/**
 * Function definition instructions: pushes the value in the accumulator register to the stack.
 */
virtual void PUSH() = 0;
/**
 * Function definition instructions: removes a double precision floating point value from the stack (to a double prevision floating point register).
 */
virtual void DPOP() = 0;
/**
 * Function definition instructions: pushes the value in the double precision floating point register to the stack.
 */
virtual void DPUSH() = 0;
/**
 * Function definition instructions: returns from a function (the stack should contain the return address).
 */
virtual void RET() = 0;
/**
 * Function definition instructions: returns from a function, but removes
 * <tt>n</tt> bytes from the stack after removing the return address.
 * More or less the same as <tt>RET()</tt> followed by <tt>TRASH(n)</tt>.
 *
 * @param bytes the number of bytes to take from the stack.
 */
virtual void RETN(int bytes) = 0;

/**
 * Function definition instructions: removes <tt>n</tt> bytes from the stack.
 *
 * @param bytes the number of bytes to take from the stack.
 */
virtual void TRASH(int bytes) = 0;

public:
// functions
/**
 * Calls the named function. Stores the return address in the stack.
 *
 * @param label is the called function's name.
 */
virtual void CALL(std::string label) = 0;

public:
// addressing
/**
 * Allocates in the stack as many bytes as indicated by the value at the top of the stack.
 *
 * Dynamic memory allocation in the stack, equivalent to a call to the
 * C language <tt>alloca</tt> function, changes the offsets of temporary
 * variables that may exist in the stack when the allocation is performed. Thus,
 * it should only be used when no temporary variables exist, or when the full
 * import of its actions is fully understood.
 */
virtual void ALLOC() = 0;

/**
 * AAbsolute addressing instruction: puts the address of the name passed as argument at the top of the stack.
 *
 * Absolute addressing <tt>ADDR</tt>) is performed using labels. Relative
 * addressing (<tt>LOCAL</tt>) requires a frame pointer to work: the frame
 * pointer defines an addressing reference.
 *
 * @param label is the name of the memory position.
 * @see LOCAL
 */
virtual void ADDR(std::string label) = 0;

/**
 * Absolute addressing instruction: quick opcode: the same as the sequence <tt>ADDR(name); STORE();</tt>
 *
 * @param label is the name of the memory position.
 * @see ADDR STORE
 */
virtual void ADDRA(std::string label) = 0;

/**
 * Absolute addressing instruction: quick opcode: the same as the sequence <tt>ADDR(name); LOAD();</tt>
 *
 * @param label is the name of the memory position.
 * @see ADDR LOAD
 */
virtual void ADDRV(std::string label) = 0;

/**
 * Relative addressing instruction: puts at the top of the stack
 * the address of the local variable, obtained by computing the
 * offset relative to the frame pointer.
 *
 * The value passed as argument is as follows: greater of equal to
 * 8, means function arguments; equal to 4, means the function's
 * return address; equal to 0, means the frame pointer itself; less
 * that -4, means local variables.
 *
 * @param offset from the top of the stack.
 */
virtual void LOCAL(int offset) = 0;

/**
 * Relative addressing instruction: quick opcode: the same as the sequence <tt>LOCAL(offset); STORE();</tt>
 *
 * @param offset from the top of the stack.
 * @see LOCAL STORE
 */
virtual void LOCA(int offset) = 0;

/**
 * Relative addressing instruction: quick opcode: the same as the sequence <tt>ADDR(name); LOAD();</tt>
 *
 * @param offset from the top of the stack.
 * @see LOCAL LOAD
 */
virtual void LOCV(int offset) = 0;

/**
 * Load instruction: loads 1 byte (char).
 */
virtual void LDCHR() = 0;

/**
 * Load instruction: loads 1 byte (without sign) (unsigned char).
 */
virtual void ULDCHR() = 0;

/**
 * Load instruction: loads 2 bytes (short).
 */
virtual void LD16() = 0;

/**
 * Load instruction: loads 2 bytes (without sign) (unsigned short).
 */
virtual void ULD16() = 0;

/**
 * Load instruction: loads 4 bytes (integer -- rvalue).
 */
virtual void LOAD() = 0;

/**
 * Load instruction: loads a double precision floating point value.
 */
virtual void DLOAD() = 0;

/**
 * Store instruction: stores 1 byte (char).
 */
virtual void STCHR() = 0;

/**
 * Store instruction: stores 2 bytes (short).
 */
virtual void ST16() = 0;

/**
 * Store instruction: stores 4 bytes (integer).
 */
virtual void STORE() = 0;

/**
 * Store instruction: stores a double precision floating point value.
 */
virtual void DSTORE() = 0;

public:
// segments
/**
 * Starts the data segment for uninitialized values.
 */
virtual void BSS() = 0;

/**
 * Starts the data segment for initialized values.
 */
virtual void DATA() = 0;

/**
 * Starts the data segment for initialized constant values.
 */
virtual void RODATA() = 0;

/**
 * Starts the text (code) segment.
 */
virtual void TEXT() = 0;

public:
// labels
/**
 * Forces the alignment of code or data.
 */
virtual void ALIGN() = 0;

/**
 * Generates a new label, as indicated by the argument.
 *
 * @param label is the new label's name.
 */
virtual void LABEL(std::string label) = 0;

/**
 * Declares the symbol whose name is passed as argument as being externally defined, i.e., defined in another compilation module.
 *
 * @param label is the symbol's name.
 */
virtual void EXTERN(std::string label) = 0;

/**
 * Declare a name/label (first argument) with a given type (second argument; see below).
 * Declaration of a name must preceed its definition.
 *
 * @param label is the name to be defined.
 * @param type is the named object's type.
 * @see  FUNC OBJ NONE
 */
virtual void GLOBAL(const char *label, std::string type) = 0;

/**
 * Declare a name/label (first argument) with a given type (second argument; see below).
 * Declaration of a name must preceed its definition. This is the C++-friendly interface.
 *
 * @param label is the name to be defined.
 * @param type is the named object's type.
 * @see  FUNC OBJ NONE
 */
virtual void GLOBAL(std::string label, std::string type) = 0;

/**
 * Declares that a name is common to other modules.
 *
 * @param value ...
 */
virtual void COMMON(int value) = 0;



########################################## ix86-family
void NOP() {
  debug("NOP");
  os() << "\tnop\n";
}
void INT(int value) {
  debug("INT", value);
  _push(_dword(value));
}
void ADD() {
  debug("ADD");
  _pop("eax");
  _add(_dword(_deref("esp")), "eax");
}
void SUB() {
  debug("SUB");
  _pop("eax");
  _sub(_dword(_deref("esp")), "eax");
}
void MUL() {
  debug("MUL");
  _pop("eax");
  _imul(_dword("eax"), _deref("esp"));
  _mov(_deref("esp"), "eax");
}
void DIV() {
  debug("DIV");
  _pop("ecx");
  _pop("eax");
  os() << "\tcdq\n" << "\tidiv\tecx\n";
  _push("eax");
}
void MOD() {
  debug("MOD");
  _pop("ecx");
  _pop("eax");
  os() << "\tcdq\n" << "\tidiv\tecx\n";
  _push("edx");
}
void NEG() {
  debug("NEG");
  _neg(_dword(_deref("esp")));
}
void INCR(int value) {
  debug("INCR", value);
  DUP();
  _pop("eax");
  _add(_dword(_deref("eax")), value);
}
void DECR(int value) {
  debug("DECR", value);
  DUP();
  _pop("eax");
  _sub(_dword(_deref("eax")), value);
}
void GT() {
  debug("GT");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsetg\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void GE() {
  debug("GE");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsetge\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void LT() {
  debug("LT");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsetl\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void LE() {
  debug("LE");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsetle\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void EQ() {
  debug("EQ");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsete\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void NE() {
  debug("NE");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  os() << "\tsetne\tcl\n";
  _mov(_deref("esp"), "ecx");
}
void AND() {
  debug("AND");
  _pop("eax");
  _and(_dword(_deref("esp")), "eax");
}
void OR() {
  debug("OR");
  _pop("eax");
  _or(_dword(_deref("esp")), "eax");
}
void XOR() {
  debug("XOR");
  _pop("eax");
  _xor(_dword(_deref("esp")), "eax");
}
void NOT() {
  debug("NOT");
  _not(_dword(_deref("esp")));
}
void ROTL() {
  debug("ROTL");
  _pop("ecx");
  _rol(_dword(_deref("esp")), "cl");
}
void ROTR() {
  debug("ROTR");
  _pop("ecx");
  _ror(_dword(_deref("esp")), "cl");
}
void SHTL() {
  debug("SHTL");
  _pop("ecx");
  _sal(_dword(_deref("esp")), "cl");
}
void SHTRU() {
  debug("SHTRU");
  _pop("ecx");
  _shr(_dword(_deref("esp")), "cl");
}
void SHTRS() {
  debug("SHTRS");
  _pop("ecx");
  _sar(_dword(_deref("esp")), "cl");
}
void LOCAL(int offset) {
  debug("LOCAL", offset);
  os() << "\tlea\teax, [ebp+" << offset << "]\n";
  _push("eax");
}
void ADDR(std::string label) {
  debug("ADDR", label);
  _push(_dword(_lbladdr(label)));
}
void LOCV(int offset) {
  debug("LOCV", offset);
  _push(_dword(_deref("ebp", offset)));
}
void ADDRV(std::string label) {
  debug("ADDRV", label);
  _push(_dword(_deref(_lbladdr(label))));
}
void LOCA(int offset) {
  debug("LOCA", offset);
  _pop("eax");
  _mov(_deref("ebp", offset), "eax");
}
void ADDRA(std::string label) {
  debug("ADDRA", label);
  _pop("eax");
  _mov(_deref(_lbladdr(label)), "eax");
}
void LOAD() {
  debug("LOAD");
  _pop("eax");
  _push(_dword(_deref("eax")));
}
void STORE() {
  debug("STORE");
  _pop("ecx");
  _pop("eax");
  _mov(_deref("ecx"), "eax");
}
void DLOAD() {
  debug("DLOAD");
  _pop("eax");
  _push(_dword(_deref("eax", 4)));
  _push(_dword(_deref("eax")));
}
void DSTORE() {
  debug("DSTORE");
  _pop("ecx");
  _pop("eax");
  _mov(_deref("ecx"), "eax");
  _pop("eax");
  _mov(_deref("ecx", 4), "eax");
}
void LDCHR() {
  debug("LDCHR");
  _pop("ecx");
  __cmd2("movsx", "eax", _byte(_deref("ecx")));
  _push("eax");
}
void STCHR() {
  debug("STCHR");
  _pop("ecx");
  _pop("eax");
  _mov(_deref("ecx"), "al");
}
void LD16() {
  debug("LD16");
  _pop("ecx");
  __cmd2("movsx", "eax", _word(_deref("ecx")));
  _push("eax");
}
void ST16() {
  debug("ST16");
  _pop("ecx");
  _pop("eax");
  _mov(_deref("ecx"), "ax");
}
void ENTER(size_t bytes) {
  debug("ENTER", bytes);
  _push("ebp");
  _mov("ebp", "esp");
  _sub("esp", bytes);
}
void START() {
  debug("START");
  _push("ebp");
  _mov("ebp", "esp");
}
void ALLOC() {
  debug("ALLOC");
  _pop("eax");
  _sub("esp", "eax");
}
void LEAVE() {
  debug("LEAVE");
  os() << "\tleave\n";
}
void TRASH(int bytes) {
  debug("TRASH", bytes);
  _add("esp", bytes);
}
void CALL(std::string label) {
  debug("CALL", label);
  _call(label);
}
void RET() {
  debug("RET");
  os() << "\tret\n";
}
void RETN(int bytes) {
  debug("RETN", bytes);
  os() << "\tret\t" << bytes << "\n";
}
void BRANCH() {
  debug("BRANCH");
  _pop("eax");
  _call("eax");
}
void LEAP() {
  debug("LEAP");
  _pop("eax");
  _jmp("eax");
}
void JMP(std::string label) {
  debug("JMP", label);
  _jmp(_dword(label));
}
void JZ(std::string label) {
  debug("JZ", label);
  _pop("eax");
  _cmp("eax", _byte(0));
  os() << "\tje\tnear " << label << "\n";
}
void JNZ(std::string label) {
  debug("JNZ", label);
  _pop("eax");
  _cmp("eax", _byte(0));
  os() << "\tjne\tnear " << label << "\n";
}
void DUP() {
  debug("DUP");
  _push(_dword(_deref("esp")));
}
void DDUP() {
  debug("DDUP");
  //DAVID: hack
  SP();
  DLOAD();
}
void SWAP() {
  debug("SWAP");
  _pop("eax");
  _pop("ecx");
  _push("eax");
  _mov("eax", "ecx");
  _push("eax");
}
void SP() {
  debug("SP");
  _push("esp");
}
void PUSH() {
  debug("PUSH");
  _push("eax");
}
void POP() {
  debug("POP");
  _pop("eax");
}
void DPUSH() {
  debug("DPUSH");
  _sub("esp", _byte(8));
  _fstp(_qword(_deref("esp")));
}
void DPOP() {
  debug("DPOP");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(8));
}
void I2D() {
  debug("I2D");
  _fild(_dword(_deref("esp")));
  _sub("esp", _byte(4));
  _fstp(_qword(_deref("esp")));
}
void F2D() {
  debug("F2D");
  _fld(_dword(_deref("esp")));
  _sub("esp", _byte(4));
  _fstp(_qword(_deref("esp")));
}
void D2I() {
  debug("D2I");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(4));
  _fistp(_dword(_deref("esp")));
}
void D2F() {
  debug("D2F");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(4));
  _fstp(_dword(_deref("esp")));
}
void DADD() {
  debug("DADD");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(8));
  _fld(_qword(_deref("esp")));
  __cmd1("faddp", "st1");
  _fstp(_qword(_deref("esp")));
}
void DSUB() {
  debug("DSUB");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(8));
  _fld(_qword(_deref("esp")));
  __cmd1("fsubrp", "st1");
  _fstp(_qword(_deref("esp")));
}
void DMUL() {
  debug("DMUL");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(8));
  _fld(_qword(_deref("esp")));
  __cmd1("fmulp", "st1");
  _fstp(_qword(_deref("esp")));
}
void DDIV() {
  debug("DDIV");
  _fld(_qword(_deref("esp")));
  _add("esp", _byte(8));
  _fld(_qword(_deref("esp")));
  __cmd1("fdivrp", "st1");
  _fstp(_qword(_deref("esp")));
}
void DCMP() {
  debug("DCMP");
  _fld(_qword(_deref("esp")));
  _fld(_qword(_deref("esp", 8)));
  _add("esp", _byte(12));
  __cmd1("fsubrp", "st1");
  os() << "\tfxtract\n";
  __cmd1("ffree", "st1");
  _fistp(_dword(_deref("esp")));
}
void DNEG() {
  debug("DNEG");
  _fld(_qword(_deref("esp")));
  os() << "\tfchs\n";
  _fstp(_qword(_deref("esp")));
}
void NIL() {
  debug("NIL");
}
void TEXT() {
  debug("TEXT");
  _segment(".text");
}
void RODATA() {
  debug("RODATA");
  _segment(".rodata");
}
void DATA() {
  debug("DATA");
  _segment(".data");
}
void BSS() {
  debug("BSS");
  _segment(".bss");
}
void ALIGN() {
  debug("ALIGN");
  os() << "align\t4\n";
}
void EXTERN(std::string label) {
  debug("EXTERN", label);
  os() << "extern\t" << label << "\n";
}
void COMMON(int value) {
  debug("COMMON", value);
  os() << "common\t" << value << "\n";
}
void GLOBAL(const char *label, std::string type) {
  GLOBAL(std::string(label), type);
}
void GLOBAL(std::string label, std::string type) {
  debug("GLOBAL", label + ", " + type);
  os() << "global\t" << label << type << "\n";
}
void LABEL(std::string label) {
  debug("LABEL", label);
  os() << label << ":\n";
}
void CONST(int value) {
  debug("CONST", value);
  __cmd1("dd", value);
}
void STR(std::string value) {
  debug("STR", "(value omitted -- see below)");
  os() << "\tdb\t";
  for (size_t ix = 0; ix < value.length();) {
    if (isalnum(value[ix])) {
      os() << '"';
      while (isalnum(value[ix]))
        os() << value[ix++];
      os() << '"';
    } else {
      os() << (int)(unsigned char)value[ix++];
    }
    os() << ", ";
  }
  os() << "0" << std::endl;
}
void CHAR(char value) {
  debug("CHAR", (int)value);
  os() << "\tdb\t" << (int)value << "\n";
}
void ID(std::string label) {
  debug("ID", label);
  __cmd1("dd", label);
}
void BYTE(int value) {
  debug("BYTE", value);
  __cmd1("resb", value);
}
void FLOAT(float value) {
  debug("FLOAT", value);
  __cmd1("dd", value);
}
void DOUBLE(double value) {
  debug("DOUBLE", value);
  __cmd1("dq", value);
}
void ULDCHR() {
  debug("ULDCHR");
  __cmd2("movsx", "eax", _byte(_deref("ecx")));
}
void ULD16() {
  debug("ULD16");
  __cmd2("movsx", "eax", _word(_deref("ecx")));
}
void UDIV() {
  debug("UDIV");
  _pop("ecx");
  _pop("eax");
  _xor("edx", "edx");
  __cmd1("idiv", "ecx");
  _push("eax");
}
void UMOD() {
  debug("UMOD");
  _pop("ecx");
  _pop("eax");
  _xor("edx", "edx");
  __cmd1("idiv", "ecx");
  _push("edx");
}
void UGT() {
  debug("UGT");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  __cmd1("seta", "cl");
  _mov(_deref("esp"), "ecx");
}
void UGE() {
  debug("UGE");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  __cmd1("setae", "cl");
  _mov(_deref("esp"), "ecx");
}
void ULT() {
  debug("ULT");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  __cmd1("setb", "cl");
  _mov(_deref("esp"), "ecx");
}
void ULE() {
  debug("ULE");
  _pop("eax");
  _xor("ecx", "ecx");
  _cmp(_deref("esp"), "eax");
  __cmd1("setbe", "cl");
  _mov(_deref("esp"), "ecx");
}
void JEQ(std::string label) {
  debug("JEQ", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tje near " << label << "\n";
}
void JNE(std::string label) {
  debug("JNE", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjne near " << label << "\n";
}
void JGT(std::string label) {
  debug("JGT", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjg near " << label << "\n";
}
void JGE(std::string label) {
  debug("JGE", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjge near " << label << "\n";
}
void JLT(std::string label) {
  debug("JLT", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjl near " << label << "\n";
}
void JLE(std::string label) {
  debug("JLE", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjle near " << label << "\n";
}
void JUGT(std::string label) {
  debug("JUGT", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tja near " << label << "\n";
}
void JUGE(std::string label) {
  debug("JUGE", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjae near " << label << "\n";
}
void JULT(std::string label) {
  debug("JULT", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjbe near " << label << "\n";
}
void JULE(std::string label) {
  debug("JULE", label);
  _pop("eax");
  _pop("ecx");
  _cmp("eax", "ecx");
  os() << "\tjb near " << label << "\n";
}
